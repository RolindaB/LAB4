
prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000025a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008dd  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000720  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000421  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ce  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	PCIFR |= (1 << PCIF1);
}

void initADC(void)
{
	ADMUX = 6;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 83       	st	Z, r24
	// Selecciona ADC6 como entrada analógica (MUX2:0 = 0b110)
	ADMUX |= (1 << MUX2) | (1 << MUX1);
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
	// Configura referencia de voltaje AVCC con capacitor en AREF
	ADMUX |= (1 << REFS0);
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  ba:	80 81       	ld	r24, Z
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	80 83       	st	Z, r24
	// Configura el ADC para operar en modo de 8 bits
	ADMUX |= (1 << ADLAR);
  c0:	80 81       	ld	r24, Z
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	80 83       	st	Z, r24
	ADCSRA = 0;
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
	// Habilita el ADC y configura la prescaler a 128 (Frecuencia de muestreo = F_CPU / 128)
	ADCSRA |= (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  cc:	80 81       	ld	r24, Z
  ce:	8f 60       	ori	r24, 0x0F	; 15
  d0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // habilitar interrupción
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <setup>:
}

void setup(void)
{
	// Configura el puerto D como salida para los displays de 7 segmentos
	DDRD = 0xFF; // Todos los pines de D como salida
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0B = 0;
  de:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PORTD =0;
  e2:	1b b8       	out	0x0b, r1	; 11
	// Configura los pines PC3 y PC4 como salida para la multiplexación de los displays
	DDRC |= (1 << DDC3) | (1 << DDC4);
  e4:	87 b1       	in	r24, 0x07	; 7
  e6:	88 61       	ori	r24, 0x18	; 24
  e8:	87 b9       	out	0x07, r24	; 7

	// Configura el pin PB2 como salida para la multiplexación de las LEDs del contador
	DDRB |= (1 << DDB2)|(1 << DDB1);
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	84 b9       	out	0x04, r24	; 4

	// Configura los pines PC0 y PC1 como entrada y habilita las resistencias pull-up
	DDRC &= ~((1 << DDC0) | (1 << DDC1));
  f0:	87 b1       	in	r24, 0x07	; 7
  f2:	8c 7f       	andi	r24, 0xFC	; 252
  f4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	88 b9       	out	0x08, r24	; 8

	// Habilita las interrupciones por cambio de pin en el puerto C para los pines PC0 y PC1 (botones)
	PCICR |= (1 << PCIE1);
  fc:	e8 e6       	ldi	r30, 0x68	; 104
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
 106:	ec e6       	ldi	r30, 0x6C	; 108
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	80 83       	st	Z, r24
	
	initADC();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	//initTimer1();
	// Habilita interrupciones globales
	sei();
 114:	78 94       	sei
	PCIFR |= (1 << PCIF1);
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	08 95       	ret

0000011e <alarma>:
	ADCSRA |= (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
	ADCSRA |= (1 << ADEN); // habilitar interrupción
}

void alarma(){
	if (ADCH>counter)
 11e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 122:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <counter>
 126:	89 17       	cp	r24, r25
 128:	20 f4       	brcc	.+8      	; 0x132 <alarma+0x14>
	{
		PORTB |= (1<<PORTB1);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 b9       	out	0x05, r24	; 5
 130:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1<<PORTB1);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	85 b9       	out	0x05, r24	; 5
 138:	08 95       	ret

0000013a <main>:
//void initTimer1(void);
void alarma(void);
int main(void)
{
	// Configuración
	setup();
 13a:	0e 94 6d 00 	call	0xda	; 0xda <setup>

	while (1)
	{
		ADCSRA |= (1<<ADSC);
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
		// Multiplexación de los displays de 7 segmentos
		PORTC |= (1 << PORTC4); // Enciende el segundo display
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	88 b9       	out	0x08, r24	; 8
		PORTD = segments[adc_valueL]; // Muestra los dígitos menos significativos con el punto decimal
 14e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <adc_valueL>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e7       	ldi	r24, 0x7F	; 127
 15e:	9e e3       	ldi	r25, 0x3E	; 62
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x26>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x2c>
 166:	00 00       	nop
		_delay_ms(4); // Breve retardo para evitar parpadeos

		PORTC &= ~(1 << PORTC4); // Apaga el segundo display
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC3); // Enciende el primer display
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	88 60       	ori	r24, 0x08	; 8
 172:	88 b9       	out	0x08, r24	; 8
		PORTD = segments[adc_valueH]; // Muestra los dígitos más significativos
 174:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	8b b9       	out	0x0b, r24	; 11
 182:	8f e7       	ldi	r24, 0x7F	; 127
 184:	9e e3       	ldi	r25, 0x3E	; 62
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x4c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x52>
 18c:	00 00       	nop
		_delay_ms(4); // Breve retardo para evitar parpadeos
		PORTC &= ~(1 << PORTC3); // Apaga el primer display
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	87 7f       	andi	r24, 0xF7	; 247
 192:	88 b9       	out	0x08, r24	; 8

		// Multiplexación de las LEDs del contador
		PORTB |= (1 << PORTB2); // Enciende las LEDs del contador
 194:	85 b1       	in	r24, 0x05	; 5
 196:	84 60       	ori	r24, 0x04	; 4
 198:	85 b9       	out	0x05, r24	; 5
		PORTD = counter;
 19a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <counter>
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	8f e1       	ldi	r24, 0x1F	; 31
 1a2:	9e e4       	ldi	r25, 0x4E	; 78
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x6a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x70>
 1aa:	00 00       	nop
		_delay_ms(5); // Breve retardo para evitar parpadeos
		PORTB &= ~(1 << PORTB2); // Apaga las LEDs del contador
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	8b 7f       	andi	r24, 0xFB	; 251
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	8f e1       	ldi	r24, 0x1F	; 31
 1b4:	9e e4       	ldi	r25, 0x4E	; 78
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x7c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x82>
 1bc:	00 00       	nop
		_delay_ms(5); // Breve retardo para evitar parpadeos
		alarma();
 1be:	0e 94 8f 00 	call	0x11e	; 0x11e <alarma>
 1c2:	bd cf       	rjmp	.-134    	; 0x13e <main+0x4>

000001c4 <__vector_4>:
	TCCR1B |= (1 << CS12) | (1 << CS10);
	TCNT1 = 65340;
	TIMSK1 |= (1 << TOIE1);
}*/

ISR(PCINT1_vect){
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
	{
		if(((PINC) & (1<<0)) == 0){
 1d0:	30 99       	sbic	0x06, 0	; 6
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <__vector_4+0x22>
			counter ++;
 1d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <counter>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <counter>
			if(counter >= 255){
 1de:	8f 3f       	cpi	r24, 0xFF	; 255
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <__vector_4+0x22>
				counter = 255;
 1e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <counter>
			}
			
		}
		
		if(((PINC) & (1<<1)) == 0){
 1e6:	31 99       	sbic	0x06, 1	; 6
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <__vector_4+0x38>
			counter --;
 1ea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <counter>
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <counter>
			if(counter <= 0){
 1f4:	81 11       	cpse	r24, r1
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__vector_4+0x38>
				counter = 0;
 1f8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter>
			}
			
		}
		
	}
}
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_21>:

ISR(ADC_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	//SE ALMACENA EL VALOR DE ADC Y SE BORRA EL VALOR DE LA BANDERA
	uint16_t adc_val16 = ADC;
 21a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 21e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint8_t adcValue = (adc_val16 >> 8);

	ADCSRA |= (1<<ADIF);
 222:	ea e7       	ldi	r30, 0x7A	; 122
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	80 83       	st	Z, r24
	
	//SE SEPARA EL VALOR DEL ADC EN 4 BITS CADA UNO
	adc_valueH = adcValue >> 4;
 22c:	89 2f       	mov	r24, r25
 22e:	82 95       	swap	r24
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	adc_valueL = adcValue & 0x0F;
 236:	89 2f       	mov	r24, r25
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <adc_valueL>
	ADCSRA |= (1<<ADSC);
 23e:	80 81       	ld	r24, Z
 240:	80 64       	ori	r24, 0x40	; 64
 242:	80 83       	st	Z, r24
	
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
