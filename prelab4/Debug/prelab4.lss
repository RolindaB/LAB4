
prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000018a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c8  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025f  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000358  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
		PORTD = counter;
	}
}

void setup(void){
	cli();
  90:	f8 94       	cli
	DDRD = 0xFF; // Configurar todos los pines del puerto B como salida
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 <<PORTD0); // limpiar
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8b b9       	out	0x0b, r24	; 11
	UCSR0B =0;
  9c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	DDRC &= ~((1 << PC0)|(1 << PC1)); // Configurar pin PC0 (botón incremento) como entrada yConfigurar pin PC1 (botón decremento) como entrada
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	8c 7f       	andi	r24, 0xFC	; 252
  a4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1); // Activar pull-up para los botones
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	88 b9       	out	0x08, r24	; 8
	
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9); // Habilitar interrupciones para pines PC0 y PC1
  ac:	ec e6       	ldi	r30, 0x6C	; 108
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1); // Habilitar interrupciones por cambio de pin en el puerto C
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	sei();//habilitar interrupciones
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <main>:
void setup(void);

int main(void)
{
	//loop
	setup();
  c4:	0e 94 48 00 	call	0x90	; 0x90 <setup>

	while (1)
	{
		PORTD = counter;
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <main+0x4>

000000d0 <__vector_4>:
	PCICR |= (1 << PCIE1); // Habilitar interrupciones por cambio de pin en el puerto C
	sei();//habilitar interrupciones
}


ISR(PCINT1_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	// Verifica si el botón de incremento fue presionado
	if (PINC == 0b00000001) {
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	41 f4       	brne	.+16     	; 0xf2 <__vector_4+0x22>
		if (counter < 255) { // Asegura que el contador no supere 255
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	71 f0       	breq	.+28     	; 0x106 <__vector_4+0x36>
		counter++; // Incrementa el contador
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	0a c0       	rjmp	.+20     	; 0x106 <__vector_4+0x36>
		 }
	}

	// Verifica si el botón de decremento fue presionado
	else if (PINC == 0b00000010) {
  f2:	86 b1       	in	r24, 0x06	; 6
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	39 f4       	brne	.+14     	; 0x106 <__vector_4+0x36>
		 if (counter > 0) { // Asegura que el contador no sea negativo
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	88 23       	and	r24, r24
  fe:	19 f0       	breq	.+6      	; 0x106 <__vector_4+0x36>
		counter--; // Decrementa el contador
 100:	81 50       	subi	r24, 0x01	; 1
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		  }
	}
	else{
		counter =counter;
	}
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
